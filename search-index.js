var searchIndex = JSON.parse('{\
"shenlong":{"doc":"Shenlong is a library for building LLVM IR from Cairo.","t":[0,0,0,0,3,8,8,3,3,3,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,4,6,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,11,11,11,12,12,12,12,12,12,12],"n":["core","sierra","libfunc","llvm_compiler","Func","LibfuncProcessor","LlvmBodyProcessor","LlvmMathAdd","LlvmMathConst","LlvmMathSub","body_creator_type","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create_body","create_body","create_body","create_body","from","from","from","from","into","into","into","into","new","output_type","parameter_types","to_llvm","to_llvm","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","value","vzip","vzip","vzip","vzip","CompilationState","CompilationStateTransition","Compiler","CompilerErr","CoreLibFunctionsProcessed","Finalized","FuncNotFound","InvalidState","InvalidStateTransition","LlvmPrintError","NoDebugName","NoReturnType","NoReturnValue","NoTypeProvided","NotStarted","PathNotFound","StatementsProcessed","TypeNotFound","TypesProcessed","VarNotFound","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone_into","compile_from_code","compile_from_file","compile_sierra_program_to_llvm","context","eq","equivalent","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","libfunc_processors","main_calls","module","output_path","program","provide","source","state","state","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","types","upcast","upcast","upcast","valid_state_transitions","variables","vzip","vzip","vzip","0","0","0","0","0","0","1"],"q":["shenlong","shenlong::core","shenlong::core::sierra","","shenlong::core::sierra::libfunc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","shenlong::core::sierra::llvm_compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","shenlong::core::sierra::llvm_compiler::CompilerErr","","","","","",""],"d":["The core library of Shenlong compiler.","Sierra related modules.","","LLVM compiler.","Add is a processor that will generate the LLVM IR for the …","LibfuncProcessor is a trait that will be implemented by …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generate the LLVM IR for the libfunc. The function will be …","See the trait documentation (<code>LibfuncProcessor</code>).","","","","","","","","","","","","","","","","","","","","","","Compilation state. This is used to keep track of the …","A compilation state transition. This is a tuple of two …","Compiler is the main entry point for the LLVM backend. It …","","The core library functions have been processed.","The compilation has been finalized. This is the final …","","","","","","","","","The compilation has not started yet.","","The statements have been processed.","","The types have been processed.","","","","","","","","The LLVM builder.","","","Compile a Sierra program code to LLVM IR.","Compile a Sierra program file to LLVM IR.","Compiles a Sierra <code>Program</code> representation to LLVM IR.","The LLVM context.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The library functions processors. Each processor is …","","The LLVM module.","The output path.","The Sierra program.","","","Get the current compilation state.","The current compilation state.","","","","","","","","","","","","The types.","","","","The valid state transitions.","The variables of the program.","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,15,15,6,7,8,15,6,7,8,13,6,7,8,15,6,7,8,15,6,7,8,15,15,15,32,15,15,6,7,8,15,6,7,8,15,6,7,8,15,6,7,8,8,15,6,7,8,0,0,0,0,20,20,4,4,4,4,4,4,4,4,20,4,20,4,20,4,30,4,20,30,4,20,30,20,20,30,30,30,30,20,20,4,4,20,30,4,4,4,20,20,30,4,20,30,30,30,30,30,4,4,30,30,20,4,30,4,20,30,4,20,30,4,20,30,30,4,20,30,30,30,4,20,33,34,35,36,37,38,38],"f":[0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],[[5,[3,4]]]],[[6,1,2],[[5,[3,4]]]],[[7,1,2],[[5,[3,4]]]],[[8,1,2],[[5,[3,4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[11,[9,10]],12,[14,[13,10]]],15],0,0,[[16,17,1,18],[[5,[4]]]],[[15,16,17,1,18],[[5,[4]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],[[],19],[[]],[[]],[[]],[[]],0,[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[20,20],[[]],[[18,18],[[5,[4]]]],[[18,18],[[5,[4]]]],[[21,18],[[5,[4]]]],0,[[20,20],22],[[],22],[[4,23],[[5,[24]]]],[[4,23],[[5,[24]]]],[[20,23],[[5,[24]]]],[[]],[[]],[25,4],[26,4],[[]],[20],[[]],[[]],[[]],0,0,0,0,0,[27],[4,[[29,[28]]]],[30,20],0,[[]],[[],31],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],19],[[],19],[[],19],0,[[]],[[]],[[]],0,0,[[]],[[]],[[]],0,0,0,0,0,0,0],"p":[[3,"Builder"],[3,"FunctionValue"],[3,"IntValue"],[4,"CompilerErr"],[4,"Result"],[3,"LlvmMathAdd"],[3,"LlvmMathSub"],[3,"LlvmMathConst"],[4,"BasicMetadataTypeEnum"],[3,"Global"],[3,"Vec"],[4,"BasicTypeEnum"],[8,"LlvmBodyProcessor"],[3,"Box"],[3,"Func"],[3,"Module"],[3,"Context"],[15,"str"],[3,"TypeId"],[4,"CompilationState"],[3,"Program"],[15,"bool"],[3,"Formatter"],[3,"Error"],[3,"Error"],[3,"LLVMString"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"Compiler"],[3,"String"],[8,"LibfuncProcessor"],[13,"VarNotFound"],[13,"FuncNotFound"],[13,"TypeNotFound"],[13,"LlvmPrintError"],[13,"PathNotFound"],[13,"InvalidStateTransition"]]},\
"shenlong_cli":{"doc":"Command line interface of Shenlong. Shenlong is a library …","t":[0,0,3,4,13,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,7,7],"n":["cli","emoji","Command","Commands","CompileToLlvm","Sierra","SierraCommands","SierraSubCommands","augment_args","augment_args","augment_args_for_update","augment_args_for_update","augment_subcommands","augment_subcommands","augment_subcommands_for_update","augment_subcommands_for_update","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","command","command","command","command","command_for_update","command_for_update","config","fmt","fmt","from","from","from","from","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","from_arg_matches_mut","group_id","group_id","has_subcommand","has_subcommand","into","into","into","into","run","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","update_from_arg_matches_mut","0","output_path","program_path","CHECK_MARK_BUTTON","SPARKLE"],"q":["shenlong_cli","","shenlong_cli::cli","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","shenlong_cli::cli::Commands","shenlong_cli::cli::SierraSubCommands","","shenlong_cli::emoji",""],"d":["","","Shenlong command line interface.","List of supported commands.","Compiles a Sierra program to LLVM IR.","Ethereum related subcommands","Sierra related commands.","Sierra related subcommands.","","","","","","","","","","","","","","","","","","","List of supported commands.","Ethereum related subcommands.","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Main entry point for the Shenlong command line interface.","","","","","","","","","","","","","","","","","","","","","","","","","","The path to the output LLVM IR file. If not specified, the …","The path to the Sierra program to compile.","",""],"i":[0,0,0,0,5,10,0,0,7,2,7,2,10,5,10,5,7,10,2,5,7,10,2,5,7,2,7,2,7,2,7,2,5,7,10,2,5,7,10,2,5,7,10,2,5,7,2,10,5,7,10,2,5,7,7,10,2,5,7,10,2,5,7,10,2,5,7,10,2,5,7,10,2,5,7,10,2,5,17,18,18,0,0],"f":[0,0,0,0,0,0,0,0,[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],1],[[],1],0,0,[[],1],[[],1],0,[[2,3],4],[[5,3],4],[[]],[[]],[[]],[[]],[6,[[9,[7,8]]]],[6,[[9,[10,8]]]],[6,[[9,[2,8]]]],[6,[[9,[5,8]]]],[6,[[9,[7,8]]]],[6,[[9,[10,8]]]],[6,[[9,[2,8]]]],[6,[[9,[5,8]]]],[[],[[12,[11]]]],[[],[[12,[11]]]],[13,14],[13,14],[[]],[[]],[[]],[[]],[7,15],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],16],[[],16],[[],16],[[],16],[[]],[[]],[[]],[[]],[[7,6],[[9,[8]]]],[[10,6],[[9,[8]]]],[[2,6],[[9,[8]]]],[[5,6],[[9,[8]]]],[[7,6],[[9,[8]]]],[[10,6],[[9,[8]]]],[[2,6],[[9,[8]]]],[[5,6],[[9,[8]]]],0,0,0,0,0],"p":[[3,"Command"],[3,"SierraCommands"],[3,"Formatter"],[6,"Result"],[4,"SierraSubCommands"],[3,"ArgMatches"],[3,"Command"],[6,"Error"],[4,"Result"],[4,"Commands"],[3,"Id"],[4,"Option"],[15,"str"],[15,"bool"],[6,"Result"],[3,"TypeId"],[13,"Sierra"],[13,"CompileToLlvm"]]},\
"shenlong_core":{"doc":"","t":[0,0,0,3,8,8,3,3,3,12,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,4,6,3,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,12,12,12,12,12,12,12,12],"n":["sierra","libfunc","llvm_compiler","Func","LibfuncProcessor","LlvmBodyProcessor","LlvmMathAdd","LlvmMathConst","LlvmMathSub","body_creator_type","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","create_body","create_body","create_body","create_body","from","from","from","from","into","into","into","into","new","output_type","parameter_types","to_llvm","to_llvm","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","upcast","upcast","upcast","upcast","value","CompilationState","CompilationStateTransition","Compiler","CompilerErr","CoreLibFunctionsProcessed","Finalized","FuncNotFound","InvalidState","InvalidStateTransition","LlvmPrintError","NoDebugName","NoReturnType","NoReturnValue","NoTypeProvided","NotStarted","PathNotFound","StatementsProcessed","TypeNotFound","TypesProcessed","VarNotFound","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","builder","clone","clone_into","compile_from_code","compile_from_file","compile_sierra_program_to_llvm","context","eq","equivalent","fmt","fmt","fmt","from","from","from","from","from","hash","into","into","into","libfunc_processors","main_calls","module","output_path","program","provide","source","state","state","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","types","upcast","upcast","upcast","valid_state_transitions","variables","0","0","0","0","0","0","1"],"q":["shenlong_core","shenlong_core::sierra","","shenlong_core::sierra::libfunc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","shenlong_core::sierra::llvm_compiler","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","shenlong_core::sierra::llvm_compiler::CompilerErr","","","","","",""],"d":["Sierra related modules.","","LLVM compiler.","Add is a processor that will generate the LLVM IR for the …","LibfuncProcessor is a trait that will be implemented by …","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Generate the LLVM IR for the libfunc. The function will be …","See the trait documentation (<code>LibfuncProcessor</code>).","","","","","","","","","","","","","","","","","","Compilation state. This is used to keep track of the …","A compilation state transition. This is a tuple of two …","Compiler is the main entry point for the LLVM backend. It …","","The core library functions have been processed.","The compilation has been finalized. This is the final …","","","","","","","","","The compilation has not started yet.","","The statements have been processed.","","The types have been processed.","","","","","","","","The LLVM builder.","","","Compile a Sierra program code to LLVM IR.","Compile a Sierra program file to LLVM IR.","Compiles a Sierra <code>Program</code> representation to LLVM IR.","The LLVM context.","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","The library functions processors. Each processor is …","","The LLVM module.","The output path.","The Sierra program.","","","Get the current compilation state.","The current compilation state.","","","","","","","","","","","","The types.","","","","The valid state transitions.","The variables of the program.","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,14,14,6,7,8,14,6,7,8,12,6,7,8,14,6,7,8,14,6,7,8,14,14,14,31,14,14,6,7,8,14,6,7,8,14,6,7,8,14,6,7,8,8,0,0,0,0,19,19,4,4,4,4,4,4,4,4,19,4,19,4,19,4,29,4,19,29,4,19,29,19,19,29,29,29,29,19,19,4,4,19,29,4,4,4,19,19,29,4,19,29,29,29,29,29,4,4,29,29,19,4,29,4,19,29,4,19,29,4,19,29,29,4,19,29,29,32,33,34,35,36,37,37],"f":[0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[1,2],[[5,[3,4]]]],[[6,1,2],[[5,[3,4]]]],[[7,1,2],[[5,[3,4]]]],[[8,1,2],[[5,[3,4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[10,[9]],11,[13,[12]]],14],0,0,[[15,16,1,17],[[5,[4]]]],[[14,15,16,1,17],[[5,[4]]]],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],18],[[],18],[[],18],[[],18],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],0,[19,19],[[]],[[17,17],[[5,[4]]]],[[17,17],[[5,[4]]]],[[20,17],[[5,[4]]]],0,[[19,19],21],[[],21],[[4,22],23],[[4,22],23],[[19,22],23],[[]],[24,4],[25,4],[[]],[[]],[19],[[]],[[]],[[]],0,0,0,0,0,[26],[4,[[28,[27]]]],[29,19],0,[[]],[[],30],[[],5],[[],5],[[],5],[[],5],[[],5],[[],5],[[],18],[[],18],[[],18],0,[[]],[[]],[[]],0,0,0,0,0,0,0,0,0],"p":[[3,"Builder"],[3,"FunctionValue"],[3,"IntValue"],[4,"CompilerErr"],[4,"Result"],[3,"LlvmMathAdd"],[3,"LlvmMathSub"],[3,"LlvmMathConst"],[4,"BasicMetadataTypeEnum"],[3,"Vec"],[4,"BasicTypeEnum"],[8,"LlvmBodyProcessor"],[3,"Box"],[3,"Func"],[3,"Module"],[3,"Context"],[15,"str"],[3,"TypeId"],[4,"CompilationState"],[3,"Program"],[15,"bool"],[3,"Formatter"],[6,"Result"],[3,"Error"],[3,"LLVMString"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"Compiler"],[3,"String"],[8,"LibfuncProcessor"],[13,"VarNotFound"],[13,"FuncNotFound"],[13,"TypeNotFound"],[13,"LlvmPrintError"],[13,"PathNotFound"],[13,"InvalidStateTransition"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
